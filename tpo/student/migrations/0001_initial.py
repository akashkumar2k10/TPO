# Generated by Django 2.2.4 on 2019-09-18 16:16

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Internship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='media/internship')),
                ('company_name', models.CharField(max_length=100, null=True)),
                ('company_description', models.TextField(max_length=100000, null=True)),
                ('Description', models.CharField(max_length=1000, null=True)),
                ('apply_before', models.DateField(blank=True, null=True)),
                ('Campus_date', models.DateField(blank=True, null=True)),
                ('Stipend', models.PositiveIntegerField(blank=True, null=True, verbose_name='Stipend')),
                ('Exam_Venue', models.CharField(blank=True, max_length=100, null=True)),
                ('Joining_location', models.CharField(blank=True, max_length=100, null=True)),
                ('duration', models.CharField(max_length=100, null=True)),
                ('Skill_set', models.TextField(max_length=10000, null=True)),
                ('percentage_Agg_clg', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate Percentage')),
                ('percentage_12', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate 10 Percentage')),
                ('percentage_10', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate 12 Percentage')),
                ('other_note', models.TextField(blank=True, max_length=100000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Jobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='media/job')),
                ('company_name', models.CharField(max_length=100, null=True)),
                ('company_description', models.TextField(max_length=100000, null=True)),
                ('Description', models.CharField(max_length=1000, null=True)),
                ('apply_before', models.DateField(blank=True, null=True)),
                ('Campus_date', models.DateField(blank=True, null=True)),
                ('Salary', models.PositiveIntegerField(blank=True, null=True, verbose_name='Salary')),
                ('Exam_Venue', models.CharField(blank=True, max_length=100, null=True)),
                ('Joining_location', models.CharField(blank=True, max_length=100, null=True)),
                ('Skill_set', models.TextField(max_length=10000, null=True)),
                ('percentage_Agg_clg', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate Percentage')),
                ('percentage_12', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate 10 Percentage')),
                ('percentage_10', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate 12 Percentage')),
                ('other_note', models.TextField(blank=True, max_length=100000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=60, null=True, verbose_name='First Name')),
                ('m_name', models.CharField(max_length=60, null=True, verbose_name='Middle Name')),
                ('l_name', models.CharField(max_length=60, null=True, verbose_name='Last Name')),
                ('full_name', models.CharField(max_length=60, null=True, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=50, null=True)),
                ('u_roll', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(100000000000, 'Please enter a valid Unvercity roll number'), django.core.validators.MaxValueValidator(999999999999, 'Please enter a valid Unvercity roll number')], verbose_name='University Roll no.')),
                ('city', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('sem', models.PositiveIntegerField(choices=[('', 'select'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8')], null=True, verbose_name='Semester')),
                ('gender', models.CharField(choices=[('', 'select'), ('Female', 'Female'), ('Male', 'Male')], default='Male', max_length=50, null=True, verbose_name='Gender')),
                ('addess', models.CharField(max_length=50, null=True, verbose_name='Address')),
                ('birth_date', models.DateField(default=datetime.date.today, null=True, verbose_name='Date of birth')),
                ('ditrict', models.CharField(max_length=50, null=True, verbose_name='District')),
                ('pin', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(100000, 'Please enter a valid 6 digit pin code'), django.core.validators.MaxValueValidator(999999, 'Please enter a valid 6 digit pin code')], verbose_name='Pin')),
                ('contact', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1000000000, 'Please enter a valid 10 digit contact number '), django.core.validators.MaxValueValidator(9999999999, 'Please enter a valid 10 digit contact number')], verbose_name='Contact')),
                ('PREFRENCE_first', models.CharField(choices=[('', 'select'), ('Placement', 'Placement'), ('CAT', 'CAT'), ('GATE', 'GATE'), ('OTHER', 'OTHER')], max_length=20, null=True, verbose_name='First prefrence')),
                ('PREFRENCE_sec', models.CharField(choices=[('', 'select'), ('Placement', 'Placement'), ('CAT', 'CAT'), ('GATE', 'GATE'), ('OTHER', 'OTHER')], max_length=20, null=True, verbose_name='Second prefrence')),
                ('PREFRENCE_third', models.CharField(choices=[('', 'select'), ('Placement', 'Placement'), ('CAT', 'CAT'), ('GATE', 'GATE'), ('OTHER', 'OTHER')], max_length=20, null=True, verbose_name='Third prefrence')),
                ('Marks_10', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='10th Percentage')),
                ('passing_year_10', models.PositiveIntegerField(null=True, verbose_name='10th Passing Year YYYY')),
                ('Marks_12', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='12th Percentage')),
                ('passing_year_12', models.PositiveIntegerField(blank=True, null=True, verbose_name='12th passing year YYYY')),
                ('Marks_Diploma', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='Diploma Percentage')),
                ('addmission_year_Diploma', models.PositiveIntegerField(blank=True, null=True, verbose_name='Admisson year Diploma')),
                ('addmission_year_BE', models.PositiveIntegerField(null=True, verbose_name='Admisson year BE')),
                ('backlog', models.PositiveIntegerField(null=True, verbose_name='No. of active backlog')),
                ('sem_1_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='1st Semester percentage')),
                ('sem_2_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='2nd Semester percentage')),
                ('sem_3_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='3rd Semester percentage')),
                ('sem_4_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='4th Semester percentage')),
                ('sem_5_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='5th Semester percentage')),
                ('sem_6_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='6th Semester percentage')),
                ('sem_7_per', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Please enter a valid percentage'), django.core.validators.MaxValueValidator(100, 'Please enter a valid percentage')], verbose_name='7th Semester percentage')),
                ('aggregate_per_clg', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aggregate percentage till now')),
                ('father_name', models.CharField(max_length=60, null=True, verbose_name='Father Name')),
                ('father_contact', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1000000000, 'Please enter a valid 10 digit contact number '), django.core.validators.MaxValueValidator(9999999999, 'Please enter a valid 10 digit contact number')], verbose_name='Father Contact')),
                ('mother_name', models.CharField(max_length=60, null=True, verbose_name='Mother Name')),
                ('mother_contact', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1000000000, 'Please enter a valid 10 digit contact number '), django.core.validators.MaxValueValidator(9999999999, 'Please enter a valid 10 digit contact number')], verbose_name='Mother Contact')),
                ('emergency_contact', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1000000000, 'Please enter a valid 10 digit contact number '), django.core.validators.MaxValueValidator(9999999999, 'Please enter a valid 10 digit contact number')], verbose_name='Emergency Contact')),
                ('course', models.CharField(choices=[('', 'select'), ('Female', 'Female'), ('Male', 'Male')], default='Male', max_length=50, null=True, verbose_name='Course')),
                ('Enrollment_no', models.CharField(max_length=6, null=True, validators=[django.core.validators.RegexValidator(message='Please enter correct Enrollment id', regex='[A-Z][A-z][0-9][0-9][0-9][0-9]')], verbose_name='Enrollment no')),
                ('Dept', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EEE', 'EEE'), ('EE', 'EE'), ('CIVIL', 'CIVIL'), ('MECH', 'MECH'), ('ETC', 'ETC')], max_length=50, null=True, verbose_name='Department')),
                ('resume', models.FileField(blank=True, null=True, upload_to='', validators=[django.core.validators.FileExtensionValidator(['pdf'], message='Please Upload in pdf format')])),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Appliedjob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applied_date', models.DateTimeField(blank=True, null=True)),
                ('job_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='student.Jobs')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='student.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='AppliedIntern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applied_date', models.DateTimeField(blank=True, null=True)),
                ('intern_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='student.Internship')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='student.Profile')),
            ],
        ),
    ]
